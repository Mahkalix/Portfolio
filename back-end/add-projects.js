const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function addMoreProjects() {
  try {
    console.log('üìù Ajout de projets suppl√©mentaires...');
    
    const projects = [
      {
        id: 'ecommerce-platform-2024',
        title: 'Plateforme E-commerce',
        description: 'Application e-commerce compl√®te avec gestion des produits, panier d\'achat, syst√®me de paiement Stripe, gestion des utilisateurs et interface d\'administration. Architecture microservices avec API RESTful.',
        year: 2024,
        use: 'D√©veloppement d\'une solution e-commerce compl√®te',
        visit: 'https://demo-ecommerce.netlify.app',
        view: 'https://github.com/Mahkalix/ecommerce-app',
        cover: '/images/ecommerce-cover.jpg',
        tools: JSON.stringify(['React.js', 'Node.js', 'MongoDB', 'Stripe', 'Express', 'JWT']),
        category: 'E-commerce'
      },
      {
        id: 'task-manager-2024',
        title: 'Gestionnaire de T√¢ches',
        description: 'Application de gestion de t√¢ches collaborative avec fonctionnalit√©s de drag & drop, notifications en temps r√©el, syst√®me de commentaires et tableaux de bord analytiques. Interface intuitive inspir√©e de Trello.',
        year: 2024,
        use: 'Application de productivit√© et collaboration d\'√©quipe',
        visit: 'https://taskmanager-demo.netlify.app',
        view: 'https://github.com/Mahkalix/task-manager',
        cover: '/images/taskmanager-cover.jpg',
        tools: JSON.stringify(['React.js', 'Node.js', 'Socket.io', 'PostgreSQL', 'Redux']),
        category: 'Productivity'
      },
      {
        id: 'weather-app-2024',
        title: 'Application M√©t√©o',
        description: 'Application m√©t√©o moderne avec pr√©visions d√©taill√©es, g√©olocalisation, cartes interactives et alertes m√©t√©o. Interface responsive avec animations CSS et int√©gration d\'APIs externes.',
        year: 2024,
        use: 'Application web pour consultation m√©t√©orologique',
        visit: 'https://weather-app-demo.netlify.app',
        view: 'https://github.com/Mahkalix/weather-app',
        cover: '/images/weather-cover.jpg',
        tools: JSON.stringify(['React.js', 'OpenWeather API', 'Leaflet', 'CSS3', 'Geolocation']),
        category: 'Web App'
      },
      {
        id: 'chat-realtime-2023',
        title: 'Application de Chat',
        description: 'Application de messagerie instantan√©e avec chat en temps r√©el, salles de discussion, partage de fichiers, √©mojis et notifications push. Architecture bas√©e sur WebSockets.',
        year: 2023,
        use: 'Communication en temps r√©el et messagerie instantan√©e',
        visit: 'https://chat-realtime.herokuapp.com',
        view: 'https://github.com/Mahkalix/realtime-chat',
        cover: '/images/chat-cover.jpg',
        tools: JSON.stringify(['React.js', 'Socket.io', 'Node.js', 'MongoDB', 'Express']),
        category: 'Communication'
      },
      {
        id: 'blog-cms-2023',
        title: 'Blog avec CMS',
        description: 'Blog personnel avec syst√®me de CMS, √©diteur de contenu riche, syst√®me de commentaires, cat√©gories, tags et interface d\'administration. SEO optimis√© et support du markdown.',
        year: 2023,
        use: 'Plateforme de publication et partage de contenu',
        visit: 'https://blog-mahkalix.vercel.app',
        view: 'https://github.com/Mahkalix/personal-blog',
        cover: '/images/blog-cover.jpg',
        tools: JSON.stringify(['Next.js', 'Markdown', 'Prisma', 'PostgreSQL', 'Tailwind CSS']),
        category: 'Content Management'
      }
    ];

    for (const projectData of projects) {
      try {
        const project = await prisma.project.create({
          data: projectData
        });
        console.log(`‚úÖ Projet ajout√© : ${project.title}`);
      } catch (error) {
        if (error.code === 'P2002') {
          console.log(`‚ö†Ô∏è Projet "${projectData.title}" existe d√©j√†`);
        } else {
          console.error(`‚ùå Erreur pour "${projectData.title}":`, error.message);
        }
      }
    }

    // V√©rifier le nombre total de projets
    const totalProjects = await prisma.project.count();
    console.log(`\nüìä Total de projets dans la base : ${totalProjects}`);
    
    console.log('\nüéâ Votre portfolio est maintenant rempli !');
    console.log('üåê Visitez http://localhost:3000 pour voir le r√©sultat');

  } catch (error) {
    console.error('‚ùå Erreur :', error);
  } finally {
    await prisma.$disconnect();
  }
}

addMoreProjects();
